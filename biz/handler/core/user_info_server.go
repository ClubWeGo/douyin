// Code generated by hertz generator.

package core

import (
	"context"

	core "github.com/ClubWeGo/douyin/biz/model/core"
	"github.com/ClubWeGo/douyin/kitex_server"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// UserInfoMethod .
// @router /douyin/user/ [GET]
func UserInfoMethod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core.UserInfoReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	msgsucceed := "获取用户信息成功"
	msgFailed := "获取用户信息失败"

	resp := new(core.UserInfoResp)

	// 从User服务拿User信息
	user, err := kitex_server.GetUser(req.UserID)

	// 从video服务拿最新的用户作品数量
	// WorkCountSet, err := kitex_server.GetVideoCountSetByUserIdSet([]int64{req.UserID})

	// 批量查询 favorite_count, total_favourited 从favorite服务: kitex_server.FavoriteClient.UserFavoriteCountMethod()
	// favoriteSet, favoritedSet, err := kitex_server.GetFavoriteCountByUserIdSet([]int64{req.UserID})

	// 批量查询 is_follow, 从relation服务
	// isFollowSet, err := kitex_server.GetIsFollowSetByUserIdSet([]int64{req.UserID})

	// 批量查询 follow_count， follower_cout 从relation服务

	if err != nil {
		resp.StatusCode = 1
		resp.StatusMsg = &msgFailed
		c.JSON(consts.StatusOK, resp)
		return
	}

	resp.StatusMsg = &msgsucceed
	resp.User = user
	c.JSON(consts.StatusOK, resp)
}
